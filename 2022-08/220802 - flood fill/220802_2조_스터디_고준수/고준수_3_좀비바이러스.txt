#include <iostream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

struct Node {
	int y, x;
	int lev;
};

queue<Node> q;

int n, m;
;
int lastlev = 0;
int directY[4] = { -1,1,0,0 };
int directX[4] = { 0,0,-1,1 };
char map[100][100];
int arr[100][100];
int main()
{

	cin >> n >> m;

	for (int i = 0; i < m; i++) {
		string a;
		cin >> a;
		for (int j = 0; j < n; j++) {
			map[i][j] = a[j]-'\0';
			
		}
	}
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			arr[i][j] = (int)(map[i][j])-48;
		}
	}


	int cnt = 0;
	int a,b;
	cin >> a >> b;
	a = a - 1;
	b = b - 1;
	arr[b][a] = 0;
	q.push({ b,a,0 });

	while (!q.empty())
	{
		Node now = q.front();
		q.pop();

		for (int i = 0; i < 4; i++)
		{
			int ny = now.y + directY[i];
			int nx = now.x + directX[i];
			if (nx < 0 || ny < 0 || nx >= n|| ny >= m)continue;
			if (arr[ny][nx] !=1) continue;
			arr[ny][nx] = 0;
			q.push({ ny,nx,now.lev + 1 });
			lastlev = now.lev + 1;

			
		}
		
	}

	cout << lastlev+3<< '\n';
	for (int i = 0; i < m; i++) {
		for (int j = 0; j < n; j++) {
			if (arr[i][j] == 1)
			{
				cnt++;
			}
		}
	}

	cout << cnt;


	return 0;
}
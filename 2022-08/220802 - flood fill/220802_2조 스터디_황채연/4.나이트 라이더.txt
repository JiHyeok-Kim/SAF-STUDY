#include <iostream>
#include <queue>
using namespace std;

int N, M;
int map[100][100];
bool visited[100][100];
typedef struct{
	int y,x;
	int turn;
}HORSE;
queue <HORSE> q;
int ret;

void BFS() {
	const int dy[] = { -2,-1,1,2,2,1,-1,-2 };
	const int dx[] = { 1,2,2,1,-1,-2,-2,-1 };

	while (!q.empty()) {
		HORSE cur = q.front();	q.pop();
		visited[cur.y][cur.x] = true;

		if (map[cur.y][cur.x] == 1) {
			ret = cur.turn;
			break;
		}

		for (int dir = 0; dir < 8; ++dir) {
			int ny = cur.y + dy[dir];
			int nx = cur.x + dx[dir];

			if (ny < 0 || ny >= N || nx < 0 || nx >= M || visited[ny][nx] == true) {
				continue;
			}
			HORSE next;
			next.y = ny, next.x = nx, next.turn = cur.turn + 1;
			q.push(next);
			visited[next.y][next.x] = true;
		}
	}
}

int main()
{
	cin >> N >> M;
	N--, M--;

	int sy, sx, ty, tx;
	cin >> sy >> sx >> ty >> tx;
	sy--, sx--, ty--, tx--;
	map[ty][tx] = 1;

	q.push({ sy,sx,0 });
	BFS();
	cout << ret;
	return 0;
}
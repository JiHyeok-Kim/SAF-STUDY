#include <iostream>
#include <queue>
using namespace std;

int N, M;
char map[100][101];
bool visited[100][100];
typedef struct {
	int y, x;
	int sec;
}ZOMBI;
queue <ZOMBI> q;
int ret_sec, ret_num;

void BFS() {
	const int dy[] = { 0,0,-1,1 };
	const int dx[] = { -1,1,0,0 };

	while (!q.empty()) {
		ZOMBI cur = q.front();	q.pop();
		visited[cur.y][cur.x] = true;
		ret_num--;

		for (int dir = 0; dir < 4; ++dir) {
			int ny = cur.y + dy[dir];
			int nx = cur.x + dx[dir];
			
			if (ny < 0 || ny >= N || nx < 0 || nx >= M || visited[ny][nx] == true) {
				continue;
			}
			if (map[ny][nx] == '0') {
				continue;
			}
			// 좀비 만나는 곳
			ZOMBI next;
			next.y = ny, next.x = nx, next.sec = cur.sec + 1;
			q.push(next);
			visited[ny][nx] = true;
			ret_sec = next.sec + 3;
		}
	}
}
int main()
{
	cin >> M >> N;
	for (int i = 0; i < N; ++i) {
		cin >> map[i];
		for (int j = 0; j < M; ++j) {
			if (map[i][j] == '1') {
				ret_num++;
			}
		}
	}
	if (ret_num == 1 && N == 1 && M == 1) {
		cout << 3 << "\n" << 0;
		return 0;
	}

	int ty, tx;
	cin >> tx >> ty;
	q.push({ ty - 1, tx - 1, 0 });

	BFS();
	cout << ret_sec << "\n" << ret_num;
	return 0;
}
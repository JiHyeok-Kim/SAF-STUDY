#include <vector>
#include <queue>

using namespace std;

struct Node {
	int x;
	int y;
};






vector<int> solution(int m, int n, vector<vector<int>> picture) {


	int number_of_area = 0;
	int max_size_of_one_area = 0;

	queue<Node>q;

	int dx[4] = { -1,1,0,0 };
	int dy[4] = { 0,0,-1,1 };

	vector<int> answer(2);
	answer[0] = number_of_area;
	answer[1] = max_size_of_one_area;

	for (int i = 0; i < m; i++)
	{
		for (int j = 0; j < n; j++)
		{

			if (picture[i][j] != 0)
			{
				int color = picture[i][j];
				int blockCnt = 0;
				int flag = 0;
				q.push({ i,j });

				//BFS
				while (!q.empty())
				{
					flag = 1;
					Node now = q.front();
					q.pop();
					for (int p = 0; p < 4; p++)
					{
						int nx = now.x + dx[p];
						int ny = now.y + dy[p];

						if (nx < 0 || ny < 0 || nx >= m || ny >= n)continue;
						if (picture[nx][ny] != color)continue;

						picture[nx][ny] = 0;
						blockCnt++;
						q.push({ nx,ny });
					}

				}
				if (flag == 1) number_of_area++;
				if (blockCnt > max_size_of_one_area)max_size_of_one_area = blockCnt;

			}
		}
	}

	answer = { number_of_area,max_size_of_one_area };
	return answer;
	//같은 색 지정
}
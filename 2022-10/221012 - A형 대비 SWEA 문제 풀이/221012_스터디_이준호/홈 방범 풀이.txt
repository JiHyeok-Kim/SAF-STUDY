#include <iostream>
#include <algorithm>
#include <cstring>
#include <vector>
#include <queue>
using namespace std;
int directY[4] = { -1, 1, 0, 0 };
int directX[4] = { 0, 0, 1, -1 };
struct Node {
	int y, x, lev;
};
queue<Node> q;
int N, M;
int arr[30][30];
int kPrice[50];
void init() {
	q = queue<Node>();
	memset(arr, 0, 30 * 30 * 4);
	int t = 0;
	kPrice[0] = 1;
	for (int i = 1; i < 50; i++) {
		kPrice[i] = kPrice[i - 1] + t;
		t += 4;
	}
}
int bfs(int dy, int dx) {
	int used[30][30] = { 0 };
	q = queue<Node>();
	q.push({ dy, dx, 1 });
	used[dy][dx] = 1;
	int Kcnt[50] = { 0 };
	while (!q.empty()) {
		Node now = q.front();
		q.pop();
		Kcnt[now.lev] += arr[now.y][now.x];
		for (int t = 0; t < 4; t++) {
			int ny = now.y + directY[t];
			int nx = now.x + directX[t];
			if (ny < 0 || nx < 0 || ny >= N || nx >= N) continue;
			if (used[ny][nx] == 1) continue;
			used[ny][nx] = 1;			
			q.push({ ny, nx, now.lev + 1 });
		}
	}
	int houseCnt = 0;
	int maxCnt = 0;
	for (int K = 1; K < 50; K++) {
		houseCnt += Kcnt[K];
		int income = houseCnt * M;
		int cost = kPrice[K];
		int left = income - cost;
		if (left < 0) continue;
		maxCnt = max(maxCnt, houseCnt);
	}
	return maxCnt;
}
int run() {
	//집의 개수 리턴
	//(4, 3)에서 K = 2 로 했을때 개수를 알려주는 함수
	int maxCnt = 0;
	for (int y = 0; y < N; y++) {
		for (int x = 0; x < N; x++) {
			int houseCnt = bfs(y, x);
			if (houseCnt > maxCnt) maxCnt = houseCnt;				
		}
	}
	
	return maxCnt;
}
int main() {
	//freopen_s(new FILE*, "input.txt", "r", stdin);
	int tcCnt = 0;
	cin >> tcCnt;
	for (int tc = 1; tc <= tcCnt; tc++) {
		init();
		cin >> N >> M;
		for (int y = 0; y < N; y++) {
			for (int x = 0; x < N; x++) {
				cin >> arr[y][x];
			}
		}
		cout << "#" << tc << " " << run() << "\n";
	}
	return 0;
}
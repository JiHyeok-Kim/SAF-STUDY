#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<queue>
using namespace std;
int divx[] = { 0,0,-1,1 };
int divy[] = { -1,1,0,0 };
int map[51][51];
int used[51][51];
int row, col, manhole_r, manhole_c, limi;
struct node {
    int ro;
    int co;
};
queue<node>q;
int cnt = 1;
int ret = 1;
void bfs(int r, int c) {

    q.push({ r,c });
    used[r][c] = 1;

    

    while (!q.empty()) {

        if (cnt == limi)break;
        int size = q.size();

        for (int i = 0; i < size; i++) {

            node now = q.front();
            q.pop();

            for (int j = 0; j < 4; j++) {

                int next_row = now.ro + divx[j];
                int next_col = now.co + divy[j];

                if (next_row < 0 || next_row >= row || next_col < 0 || next_col >= col)continue;
                if (map[next_row][next_col] == 0)continue;
                if (used[next_row][next_col] == 1)continue;
                if (j == 0) {
                    if (map[now.ro][now.co] != 2 && map[now.ro][now.co] != 4 && map[now.ro][now.co] != 5) {
                        if (map[next_row][next_col] == 1 || map[next_row][next_col] == 3 || map[next_row][next_col] == 4 || map[next_row][next_col] == 5) {
                            q.push({ next_row,next_col });
                            used[next_row][next_col] = 1;
                            ret++;
                        }
                    }
                }
                else if (j == 1) {
                    if (map[now.ro][now.co] != 2 && map[now.ro][now.co] != 6 && map[now.ro][now.co] != 7) {
                        if (map[next_row][next_col] == 1 || map[next_row][next_col] == 3 || map[next_row][next_col] == 6 || map[next_row][next_col] == 7) {
                            q.push({ next_row,next_col });
                            used[next_row][next_col] = 1;
                            ret++;
                        }
                    }

                }
                else if (j == 2) {
                    if (map[now.ro][now.co] != 3 && map[now.ro][now.co] != 5 && map[now.ro][now.co] != 6) {
                        if (map[next_row][next_col] == 1 || map[next_row][next_col] == 2 || map[next_row][next_col] == 5 || map[next_row][next_col] == 6) {
                            q.push({ next_row,next_col });
                            used[next_row][next_col] = 1;
                            ret++;
                        }
                    }

                }
                else if (j == 3) {

                    if (map[now.ro][now.co] != 3 && map[now.ro][now.co] != 4 && map[now.ro][now.co] != 7) {
                        if (map[next_row][next_col] == 1 || map[next_row][next_col] == 2 || map[next_row][next_col] == 4 || map[next_row][next_col] == 7) {
                            q.push({ next_row,next_col });
                            used[next_row][next_col] = 1;
                            ret++;
                        }
                    }

                }


            }

        }
        cnt++;


    }


}
void input()
{
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            cin >> map[i][j];
        }
    }

}
void init() {
    for (int i = 0; i < 51; i++) {
        for (int j = 0; j < 51; j++) {
            map[i][j] = 0;
            used[i][j] = 0;
        }
    }
}
void init2() {

    while (!q.empty()) {
        q.pop();
    }
}
int main()
{
    //freopen_s(new FILE*, "input.txt", "r",stdin);

    int T;
    cin >> T;

    for (int cas = 1; cas <= T; cas++) {

        cout << "#" << cas << " ";

        cin >> row >> col >> manhole_r >> manhole_c >> limi;
        init();
        init2();
        cnt = 1;
        ret = 1;
        input();

        bfs(manhole_r, manhole_c);



        cout << ret<<"\n";
    }
}

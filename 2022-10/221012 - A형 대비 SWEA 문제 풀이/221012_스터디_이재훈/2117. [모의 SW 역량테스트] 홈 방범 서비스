#include <iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<queue>
#include<deque>
#include<math.h>
#include<unordered_set>
using namespace std;
int map[20][20];
int used[20][20];
int N, money;
int divx[] = { -1,1,0,0 };
int divy[] = { 0,0,-1,1 };
vector<int>v;
struct node {
    int ro;
    int co;
};
queue<node>q;
void input()
{
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> map[i][j];
        }
    }

}
void init()
{
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 20; j++) {
            map[i][j] = 0;
            used[i][j] = 0;
        }
    }
}
void flood(int row, int col)
{
    q.push({ row,col });
    used[row][col] = 1;
    int ret = 1;
    int cnt = 0;
    if (map[row][col] == 1) {
        cnt++;
    }
    while (!q.empty()) {

        int oper = ret * ret + (ret - 1) * (ret - 1);
        if ((cnt*money)-oper >= 0)v.push_back(cnt);
        int size = q.size();

        for (int i = 0; i < size; i++) {
            node now = q.front();
            q.pop();

            for (int j = 0; j < 4; j++) {
                int next_row = now.ro + divx[j];
                int next_col = now.co + divy[j];

                if (next_row < 0 || next_row >= N || next_col < 0 || next_col >= N)continue;
                if (used[next_row][next_col] == 1)continue;
                q.push({ next_row,next_col });
                used[next_row][next_col] = 1;
                if (map[next_row][next_col] == 1)cnt++;

            }
        }
        ret++;

    }




}
void init3() {
    for (int i = 0; i < 20; i++) {
        for (int j = 0; j < 20; j++) {
            used[i][j] = 0;
        }
    }
}
int main()
{
    //freopen_s(new FILE*, "input.txt", "r", stdin);
    int T;
    cin >> T;

    for (int cas = 1; cas <= T; cas++) {


        cin >> N >> money;
        v.clear();
        init();
        input();
        for (int i =0 ; i < N; i++) {
            for (int j = 0; j < N; j++) {
                  flood(i, j);
                  init3();
            }
        }

        cout << "#" << cas << " ";
        sort(v.begin(), v.end());
        cout << v[v.size() - 1] <<"\n";
    }

}

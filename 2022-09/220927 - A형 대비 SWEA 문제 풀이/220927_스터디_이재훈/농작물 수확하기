#include <iostream>
#include<algorithm>
#include<queue>
using namespace std;
int divx[] = { 0,-1,1,0 };
int divy[] = { -1,0,0,1 };
struct node {
	int row;
	int col;
};
queue<node>q;
int N;
int arr[50][50];
int used[50][50];

int flood(int r,int c) {
	used[r][c] = 1;
	int sum = 0;
	int cnt = 0;
	q.push({ r,c });
	while (!q.empty()) {

		int size = q.size();
		if (cnt == (N / 2))break;
		for (int i = 0; i < size; i++) {
			node now = q.front();
			q.pop();

			for (int j = 0; j < 4; j++) {
				int next_row = now.row + divx[j];
				int next_col = now.col + divy[j];

				if (next_row < 0 || next_row >= N || next_col < 0 || next_col >= N)continue;
				if (used[next_row][next_col] == 1)continue;
				used[next_row][next_col] = 1;
				q.push({ next_row,next_col });
				sum += arr[next_row][next_col];
			}
		}
		cnt++;

	}

	return sum;
}
void init() {
	for (int i = 0; i < 50; i++) {
		for (int j = 0; j < 50; j++) {
			arr[i][j] = 0;
			used[i][j] = 0;
		}
	}
}
void init2() {
	while (!q.empty()) {
		q.pop();
	}
}
int main()
{
	ios::sync_with_stdio(false);
	
	//freopen_s(new FILE*, "input.txt", "r", stdin);
	cin.tie();
	cout.tie();
	int T;
	cin >> T;

	for (int cas = 1; cas <= T; cas++) {

		init();
		init2();
		cin >> N;
		for (int i = 0; i < N; i++) {
			string s;
			cin >> s;

			for (int j = 0; j < N; j++) {
				arr[i][j] = s[j]-'0';
			}
		}

		int start_row = N / 2;
		int start_col = N / 2;
		int result=flood(start_row, start_col);
		cout <<"#" <<cas <<" " << result + arr[start_row][start_col]<<"\n";

	}
}
